@use "./utils/function" as*;
@use "./utils/map" as*;
@use './utils/mixin' as *;

@use "./utils/variables";
@use "../fonts/fonts";

.overlay {
    @include positions(fixed);
    width: variables.$width-full;
    height: variables.$height-full;
    top: 0;
    left: 0;
    z-index: variables.$z-layer;
    background-color: var(--overlay-bg-color);
    color: var(--accent-color);

    @include flex(flex, column, nowrap, unset, unset);
    overflow: hidden;

    .header {
        @include flex(flex, row, nowrap, space-between, center);

        .overlay-title{
            // font-size: fonts.$font-size-large;
            font-family: fonts.$font-third;
            font-weight: bold;
        }

        .overlay-close-button button {
            background: none;

        }
    }

    .selection__container {
        @include flex(flex, row, nowrap, center, center);
        height: calc(variables.$height-full - 15%);
        width: auto;

        &--list {
            @include flex(flex, row, wrap, center, center);

            perspective: 1000px;
            gap: 40px;

            .card {

                &:hover,
                &:focus-within {
                    transform: rotateY(180deg) scale(1.1);
                }

                @include positions(relative);

                width: rem(230);
                height: rem(285);
                transform-style: preserve-3d;
                transition: .6s .1s;
                cursor: pointer;
            }



            .card--front,
            .card--back-lg {
                @include positions(absolute);
                @include flex(flex, row, wrap, center, center);

                width: variables.$width-full;
                height: variables.$height-full;
                border-radius: 30px;

                top: 0;
                left: 0;
                overflow: hidden;

                backface-visibility: hidden;
                -webkit-backface-visibility: hidden;
            }

            // card-front
            .card--front {
                @include positions(relative);

                transform: rotateY(0deg);
                z-index: variables.$z-layer;
                text-align: center;

                div {
                    @include positions(absolute);
                    
                    width: variables.$width-full;
                    text-transform: capitalize;

                    &:first-of-type {
                        top: 20px;
                        font-size: fonts.$font-size-large;
                        font-family: fonts.$font-primary;
                    }

                    &:last-of-type {
                        bottom: 20px;
                        font-family: fonts.$font-secondary;

                        svg {
                            font-size: calc(fonts.$font-size-small + .2rem);
                        }
                    }
                }

            }



            //  .card-back
            .card--back-lg {
                transform: rotateY(180deg) translate3d(0, 0, 50px);
                z-index: variables.$z-layer;
                text-align: center;
                background: var(--card-back-bg-color);
                padding: variables.$spacing-small;
                will-change: transform;
                perspective: 1000px;
                -webkit-perspective: 1000px;
            }

            img {
                height: variables.$height-full;
                border-radius: 24px;
                filter: brightness(60%);
                -webkit-filter: brightness(60%);
            }



        }

        &--map {
            height: variables.$height-full;
            margin-left: addSpacing(variables.$spacing-medium, 2);

            svg {
                height: variables.$height-full;
            }


        }

        @each $feature, $styles in $svg-hover-styles {

            // Hover effect when a card is hovered
            .selection__container--list:has(.card[data-title="#{$feature}"]:hover)~.selection__container--map svg path[id="#{$feature}"],
            .selection__container--list:has(.card[data-title="#{$feature}"]:focus)~.selection__container--map svg path[id="#{$feature}"],
            .selection__container--list:has(.card[data-title="#{$feature}"]:focus-within)~.selection__container--map svg path[id="#{$feature}"],
            .selection__container--list:has(.card[data-title="#{$feature}"]:active)~.selection__container--map svg path[id="#{$feature}"] {
                @each $prop, $value in $styles {
                    #{$prop}: #{$value};
                }
            }
        }

    }

    .panel__content {
        @include flex(flex, row, wrap, unset, center);
        @include flex-basis(1, 1, 0);

        text-align: start;

        &--about,
        &--credit {
            @include flex-basis(1, 1, 50%);
        }

        &--about {

            .heading {
                @include displays(block);

                font-size: calc(fonts.$font-size-large + .55rem);
                padding-bottom: addSpacing(variables.$spacing-none, .55);
                padding: 1rem 0;
            }

            p {
                font-size: calc(fonts.$font-size-small + .1rem);
            }

            .share-button {
                padding: addSpacing(variables.$spacing-medium, 1) variables.$spacing-none addSpacing(variables.$spacing-small, .5);
                font-size: calc(fonts.$font-size-large + .05rem);
                line-height: 0.9em;
                font-weight: 400;
            }

            .share-icons {
                height: rem(50);

                svg {
                    @include vertical-alignment(middle);

                    width: rem(35);
                    height: auto;
                    object-fit: cover;
                    color: var(--primary-color);
                    transition: color 1s linear;
                    cursor: pointer;
                    margin: variables.$spacing-none addSpacing(variables.$spacing-none, .5);
                }
            }
        }

        &--credit {
            .tools {
                width: variables.$width-full;
                height: rem(250);
                text-align: center;
                padding: addSpacing(variables.$spacing-medium, 1) 0;

                .heading {
                    @include displays(block);

                    padding: addSpacing(variables.$spacing-medium, 1) variables.$spacing-none addSpacing(variables.$spacing-small, .5);
                    font-size: calc(fonts.$font-size-large + .05rem);
                }


                @each $icon, $color in $tech-stack {
                    svg[data-icon="#{$icon}"] {
                        @include displays(inline-block);

                        fill: $color;
                        font-size: calc(fonts.$font-size-large + .5rem);
                        margin: addSpacing(variables.$spacing-none, .6) addSpacing(variables.$spacing-small, .5);

                    }
                }
            }

            .inspiration {
                width: variables.$width-full;
                height: rem(250);
                text-align: center;
                padding-top: variables.$spacing-medium;

                iframe {
                    border-radius: 10px;
                }
            }
        }
    }

}

//repeating styles
.overlay.panel,
.overlay {
    flex-direction: column;
    padding: addSpacing(variables.$spacing-medium, .5);
    overflow-y: auto;
    scrollbar-width: none;
}

.overlay.panel .overlay-close-button,
.overlay .overlay-close-button {
    @include displays(inline-block);

    border-radius: 50%;
    border: variables.$border-width-medium solid var(--primary-color);
    width: 3.2em;
    height: 3.2em;
}

.overlay.panel .overlay-close-button button,
.overlay .overlay-close-button button {
    font-size: calc(fonts.$font-size-medium + .15rem);
    width: variables.$width-full;
    height: variables.$height-full;
}